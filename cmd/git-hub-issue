#!/usr/bin/env bash

command:issue-new() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'

  if [ -z "$branch_name" ]; then
    branch_name=$(git rev-parse --abbrev-ref HEAD)
  fi
  local head="$login:$branch_name"
  local base="$branch"
  local url="/repos/$owner/$repo/issues"

  editor-title-body "
# Enter your issue info at the top like this:
#
#   First line is the issue subject
#
#   The issue body comes here, after a blank line separating it from the
#   subject.
#
#   The body can be as many lines as needed, and is optional. Only the issue
#   subject is required."

  api-post "$url" "$(
    json-dump-object title "$title" body "$body"
  )"
}

command:issue-list() {
  get-args '?owner:get-owner/repo:get-repo'

  report-list \
    "/repos/$owner/$repo/issues?sort=updated;per_page=PER_PAGE" \
    'number updated_at state user/login title'
}

format-entry:issue-list() {
  printf "%d) #%d (%s) %-6s @%-16s %s\n" $1 $2 ${3/T*/} $4 $5 "$6"
}

command:issue() {
  get-args '?owner:get-owner/repo:get-repo' number
  api-get "/repos/$owner/$repo/issues/$number"
}

ok:issue() {
  local label_title='Issue'
  local label_body='Description'
  fields=(
    title number user__login state body comments
  )
  local skip_field_comments=true
  report-data

  local comments=$(JSON.get -n /comments -)
  if [ $comments -gt 0 ]; then
    out Comments:
    command=comments
    report-list \
      "/repos/$owner/$repo/issues/$number/comments?sort=updated;per_page=PER_PAGE" \
      'user/login updated_at body'
    out
  fi
}

command:issue-update() {
  die "$command not yet implemented"
}

command:issue-close() {
  die "$command not yet implemented"
}

# vim: set lisp:
