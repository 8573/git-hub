#!/usr/bin/env bash

set -e

command:issue-new() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'

  local url="/repos/$owner/$repo/issues"

  editor-title-body "
# Enter your issue info at the top like this:
#
#   First line is the issue subject
#
#   The issue body comes here, after a blank line separating it from the
#   subject.
#
#   The body can be as many lines as needed, and is optional. Only the issue
#   subject is required."

  api-post "$url" "$(
    json-dump-object title "$title" body "$body"
  )"
}

command:issues() {
  get-args '?owner:get-owner/repo:get-repo'

  state=open
  "$do_all" && state=all

  report-list \
    "/repos/$owner/$repo/issues?state=$state;sort=updated;per_page=PER_PAGE" \
    'number updated_at state user/login title'
}

format-entry:issues() {
  if "$raw_output"; then
    echo "$2"
  else
    printf "#%-3d (%s) %-6s @%-16s %s\n" "$2" "${3/T*/}" "$4" "$5" "$6"
  fi
}

command:issue() {
  get-args '?owner:get-owner/repo:get-repo' "number:'none'"
  if [ "$number" == none ]; then
    command=issue-new
    command:issue-new
  else
    api-get "/repos/$owner/$repo/issues/$number"
  fi
}

ok:issue() {
  local label_title=Issue
  local label_body=Description
  fields=(
    title number user__login state created_at body comments
  )
  local skip_field_comments=true
  report-data

  local comments="$(JSON.get -n /comments -)"
  if [ "$comments" -gt 0 ]; then
    echo Comments:
    command=comments
    report-list \
      "/repos/$owner/$repo/issues/$number/comments?sort=updated;per_page=PER_PAGE" \
      'user/login updated_at body'
  fi
}

format-entry:comments() {
  printf "%d) %-14s (%s)\n" "$1" "$2" "${3/T*/}"
  local text
  normalize-multiline-text-output "$4" " "
  echo "$text"
  echo
  :
}

command:issue-close() {
  get-args '?owner:get-owner/repo:get-repo' number
  api-patch "/repos/$owner/$repo/issues/$number" "$(
    json-dump-object state closed
  )"

}

command:issue-update() {
  die "$command not yet implemented"
}

# vim: set lisp:
