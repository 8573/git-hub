#!/usr/bin/env bash
#
# git-hub: Do GitHub operations from the `git` command
#
# Copyright (c) 2013-2014 Ingy dÃ¶t Net

set -e

{
  Bash:version-check() {
    test $1 -ge 4 && return
    test $1 -eq 3 -a $2 -ge 2 && return
    echo "Bash version 3.2 or higher required for 'git hub'" >&2
    exit 1
  }
  Bash:version-check "${BASH_VERSINFO[@]}"
  unset -f Bash:version-check
}

GIT_HUB_VERSION=0.0.3

OPTIONS_SPEC="\
git hub <command> <options> <arguments>

The most commonly used commands:
  help, setup, upgrade, config, url, open, keys,
  user, orgs, org, teams, members, followers, following, follow, stars, star,
  clone, repos, repo, repo-new, repo-delete, forks, fork, collabs, trust,
  issues, issue, issue-update, issue-close, comment,
  pull-request, pulls, pull-diff, pull-merge

See 'git help hub' for complete documentation of *all* the commands.

Options:
--
h           Show the command summary
help        Show the complete documentation
 
remote=     Remote name (like 'origin')
branch=     Branch name (like 'master')
org=        GitHub organization name
 
c,count=    Number of list items to show
a,all       Show all list items
 
q,quiet     Show minimal output
v,verbose   Show verbose output
r,raw       Show output data in a raw form
j,json      Show output data in JSON
 
A,use-auth  Force the use of authentication. (Get around rate limits)
C,no-cache  Don't use cached responses.
token=      Explicitly specify the GitHub v3 API Authentication Token
d,dryrun    Check arguments but don't actually run the API command
T           Show API token in the verbose output
 
O           Debug - Show response output
H           Debug - Show reponse headers
J           Debug - Show parsed JSON response
R           Debug - Repeat last command without contacting server
x           Debug - Turn on Bash trace (set -x) output
"


# source bash+ :std
source "${BASH_SOURCE%/*}/git-hub.d/bash+.bash"
bash+:import :std can


#------------------------------------------------------------------------------
main() {
  local OK=0 split_words=false
  init-env
  if run-for-each "$@"; then
    run-each "$@"
  else
    run-command "$@"
  fi
  exit $OK
}

run-command() {
  set -e
  local Infinity=9999999
  local command command_arguments command_sha1 api_token
  local command_header_file command_output_file command_error_file
  local user org owner repo pairs fields title list_size remote_name
  local msg_ok msg_fail status_code ERROR
  local do_all=false use_auth no_cache
  local quiet_output verbose_output
  local raw_output=false json_output=false
  local show_output=false show_headers=false show_json=false
  local dry_run=false show_token repeat_command=false
  local terminal_lines terminal_cols
  init-vars

  get-opts "$@"
  assert-env

  callable-or-source "$command" ||
    die "Unknown 'git hub' command: '$command'\n"
  "command:$command" "$@"

  if OK; then
    if can "ok:$command"; then
      "ok:$command"
    else
      if [ "$msg_ok" != '0' ]; then
        say ${msg_ok:-"'git hub $command' command successful"}
      fi
    fi
  else
    local status_msg=msg_$status_code
    if [ -n "${!status_msg}" ]; then
      nay "${!status_msg}"
    elif [ -n "$status_code" ] && can "status-$status_code:$command"; then
      "status-$status_code:$command"
    elif [ -n "$msg_fail" ]; then
      nay "$msg_fail"
    elif can "fail:$command"; then
      "fail-$command"
    else
      local msg="Error: 'git hub $command' command failed"
      ! $verbose_output && [ -n "$status_code" ] &&
        msg+=": $status_code"
      nay "$msg"
    fi
    if $verbose_output && [ -n "$ERROR" ]; then
      nay
      [ -n "$status_code" ] &&
        nay "API status code: $status_code\n"
      [ -n "$ERROR" ] &&
        nay "API error output:\n$ERROR\n"
    fi
  fi
  true
}

run-each() {
  local i line before=() after=() seen=false
  for ((i = 1; i <= $#; i++)); do
    if [[ ${!i} =~ ^[-=]$ ]]; then
      seen=true
    elif ! $seen; then
      before+=( "${!i}" )
    else
      after+=("${!i}")
    fi
  done
  while read line; do
    local lines=("$line")
    $split_words && lines=($line)
    local arg
    for arg in "${lines[@]}"; do
      options=()
      options+=("${before[@]}")
      options+=($arg)
      options+=("${after[@]}")
      run-command "${options[@]}"
      OK || return
    done
  done
}

#------------------------------------------------------------------------------
# `git hub` command functions:
#------------------------------------------------------------------------------
command:help() {
  exec git help hub
}

command:user() {
  get-args '?user:get-user'
  api-get "/users/$user"
  msg_404="User '$user' not found."
}

ok:user() {
  fields=(
    login type name email blog location company bio
    followers following public_repos public_gists created_at
  )
  report-data
}

command:user-get() {
  get-args '?user:get-user' key
  api-get "/users/$user"
  OK || {
    msg_fail="User '$user' not found"
    return
  }
  local value=$(JSON.get -a "/$key" -)
  if [ -n "$value" ]; then
    msg_ok="$value"
  else
    msg_fail="Couldn't get value for '$key'"
    OK=1
  fi
}

command:user-edit() {
  require-auth
  get-args %pairs
  api-patch "/user" "$(json-dump-object-pairs)"
}

command:orgs() {
  get-args user:get-user
  local title="Organizations for User '$user':"
  msg_fail="Can't find Organizations for User '$user'"
  report-list \
    "/users/$user/orgs?per_page=PER_PAGE" \
    'login'
}

command:org() {
  get-args org
  api-get "/orgs/$org"
}

ok:org() {
  fields=(
    login type name billing_email email blog location company
    html_url public_repos public created_at
  )
  report-data
}

command:org-get() {
  get-args org key
  api-get "/orgs/$org"
  OK || {
    msg_fail="Organization '$org' not found"
    return
  }
  local value=$(JSON.get -a "/$key" -)
  if [ -n "$value" ]; then
    msg_ok="$value"
  else
    msg_fail="Couldn't get value for '$key'"
    OK=1
  fi
}

command:org-edit() {
  require-auth
  get-args org %pairs
  api-patch "/orgs/$org" "$(json-dump-object-pairs)"
}

command:followers() {
  get-args '?user:get-user'
  report-list \
    "/users/$user/followers?per_page=PER_PAGE" \
    login
}

command:following() {
  get-args '?user:get-user'
  report-list \
    "/users/$user/following?per_page=PER_PAGE" \
    login
}

command:follows() {
  get-args user '?target:get-login'
  api-get /users/$user/following/$target
  if OK; then
    msg_ok="'$user' follows '$target'"
  else
    msg_ok="'$user' does not follow '$target'"
  fi
  OK=0
  true
}

command:follow() {
  require-auth
  get-args user:get-owner
  api-put "/user/following/$user"
  msg_ok="'$login' is now following '$user'"
}

command:unfollow() {
  require-auth
  get-args user:get-owner
  api-delete "/user/following/$user"
  msg_ok="'$login' is no longer following '$user'"
}

command:clone() {
  get-args '?owner:get-user/repo:get-repo' '?dir'
  msg_ok=0

  owner_repo="$owner/$repo"

  url="git@github.com:$owner_repo"
  cmd="git clone --recursive $url $dir"
  if [ -n "$branch_name" ]; then
    cmd+=" --branch $branch_name"
  fi

  # TODO Make this dry_run on non-API command be reusable
  $verbose_output && nay "$cmd"
  $dry_run && {
    nay '*** NOTE: This is a dry run only. ***'
    return 0
  }

  local OK=0
  (
    if $quiet_output; then
      $cmd &> /dev/null
    elif $verbose_output; then
      (
        set -x
        $cmd
      )
    else
      $cmd
    fi
  ) || OK=1
  if OK; then
    if [ -n "$dir" ]; then
      say "$owner_repo cloned into $dir"
    else
      say "$owner_repo cloned"
    fi
  else
    say "Failed: 'git hub clone $@'"
    if ! $verbose_output; then
      say "  Try using -v for more info"
    fi
  fi
}

# vim: set ft=sh tabstop=4 shiftwidth=4 lisp noexpandtab:
command:repos() {
  get-args owner:get-user
  report-list \
    "/users/$owner/repos?sort=pushed;per_page=PER_PAGE" \
    'pushed_at full_name description'
}

format-entry:repos() {
  if $raw_output; then
    out "$3"
  else
    printf -v output_line "%d) (%s)  %-30s %s" $1 ${2/T*} $3 "$4"
  fi
}

command:repo() {
  get-args '?owner:get-user/repo:get-repo'
  api-get "/repos/$owner/$repo"
}

ok:repo() {
  fields=(
    full_name description homepage language
    html_url ssh_url
    forks parent__full_name source__full_name
    watchers open_issues pushed_at created_at
  )
  report-data
}

command:repo-get() {
  get-args '?owner:get-user/repo:get-repo' key
  api-get "/repos/$owner/$repo"
  OK || {
    msg_fail="Repo '$owner/$repo' not found"
    return
  }
  local value=$(JSON.get -a "/$key" -)
  if [ -n "$value" ]; then
    msg_ok="$value"
  else
    msg_fail="Couldn't get value for '$key'"
    OK=1
  fi
}

command:repo-edit() {
  require-auth
  get-args '?owner:get-user/repo:get-repo' %pairs
  local adds=(name "$repo")
  for (( i = 0; i < ${#pairs[@]}; i = i + 2 )); do
    if [ "${pairs[$i]}" == name ]; then
      adds=()
      break
    fi
  done
  pairs+=( "${adds[@]}" )
  api-patch "/repos/$owner/$repo" "$(json-dump-object-pairs)"
}

# TODO Support creating repo under an org
command:repo-new() {
  require-auth
  get-args '?org:get-user/repo:get-repo'
  local login=$(get-login)
  if [ "$org" == "$login" ]; then
    api-post "/user/repos" "$(json-dump-object name "$repo")"
  else
    api-post "/orgs/$org/repos" "$(json-dump-object name "$repo")"
  fi
  msg_ok="Repository 'git@github.com:$org/$repo' created."
  msg_422="Repository name 'git@github.com:$org/$repo' already exists."
}

command:repo-delete() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  api-delete "/repos/$owner/$repo"
  msg_ok="Repository '$owner/$repo' deleted"
}

command:forks() {
  get-args '?owner:get-user/repo:get-repo'
  report-list \
    "/repos/$owner/$repo/forks?sort=newest;per_page=PER_PAGE" \
    'pushed_at full_name'
}

format-entry:forks() {
  if $raw_output; then
    out "$3"
  else
    printf "%d) (%s)  %-30s\n" $1 ${2/T*/} $3
  fi
}

command:fork() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  local data='{}'
  if [ -n "$organization" ]; then
    api-post "/repos/$owner/$repo/forks" \
      "$(json-dump-object organization "$organization")"
  else
    api-post "/repos/$owner/$repo/forks" '{}'
  fi
  local login=$(get-login)
  msg_ok="Repository '$owner/$repo' forked to '$login'"
  if OK && [ -n "$remote_name" ] && inside-git-repo; then
    url="git@github.com:$login/$repo.git"
    git remote add "$remote_name" "$url"
    say "git remote add $remote_name $url"
  fi
}

command:stars() {
  get-args '?owner:get-user/repo:get-repo'
  local title="Stargazers for '$owner/$repo':"
  report-list \
    "/repos/$owner/$repo/stargazers?per_page=PER_PAGE" \
    'login'
  msg_fail="Couldn't find Stargazers for '$owner/$repo'"
}

command:star() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  api-put "/user/starred/$owner/$repo"
  msg_ok="'$owner/$repo' starred"
}

command:unstar() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  api-delete "/user/starred/$owner/$repo"
  msg_ok="'$owner/$repo' unstarred"
}

command:watch() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  api-put "/user/subscriptions/$owner/$repo"
  msg_ok="You are watching '$owner/$repo'"
}

command:unwatch() {
  require-auth
  get-args '?owner:get-user/repo:get-repo'
  api-delete "/user/subscriptions/$owner/$repo"
  msg_ok="You are no longer watching '$owner/$repo'"
}

command:starred() {
  get-args '?user:get-user'
  report-list \
    "/users/$user/starred?sort=updated;per_page=PER_PAGE" \
    'full_name'
}

command:collabs() {
  get-args '?owner:get-user/repo:get-repo'
  report-list \
    "/repos/$owner/$repo/collaborators" \
    'login'
}

command:trust() {
  require-auth
  get-args '?owner:get-user/repo:get-repo' @collaborators
  for collab in ${collaborators[@]}; do
    api-put "/repos/$owner/$repo/collaborators/$collab"
  done
  msg_ok="'$owner/$repo' commit permission added for: ${collaborators[@]}"
}

command:untrust() {
  require-auth
  get-args '?owner:get-user/repo:get-repo' @collaborators
  for collab in ${collaborators[@]}; do
    api-delete "/repos/$owner/$repo/collaborators/$collab"
  done
  msg_ok="'$owner/$repo' commit permission removed for: ${collaborators[@]}"
}

command:keys() {
  get-args owner:get-user
  report-list \
    "/users/$owner/keys" \
    'key'
}

format-entry:keys() {
  if $raw_output; then
    out "$2"
  else
    say "Public SSH keys for '$owner':"
    printf "%d) %s\n" "$1" "$2"
  fi
}

command:keys-add() {
  require-auth
  get-args title key
  api-post "/user/keys" "$(json-dump-object title "$title" key "$key")"
  msg_ok="Public key successfully added."
}

command:config() {
  get-args config_key:empty config_value:empty
  msg_ok=0
  if [ -z "$config_key" ]; then
    [ ! -e $GIT_HUB_CONFIG ] && config-not-setup
    say "Your git-hub config file (at $GIT_HUB_CONFIG):\n"
    cat $GIT_HUB_CONFIG
  elif [ -z "$config_value" ]; then
    local value=$(git config -f $GIT_HUB_CONFIG github.$config_key) ||
      return $?
    msg_ok="$config_key=$value"
  else
    git config -f $GIT_HUB_CONFIG github.$config_key "$config_value"
    msg_ok="$config_key=$config_value"
  fi
  OK=$?
}

command:config-unset() {
  get-args config_key
  git config -f $GIT_HUB_CONFIG --unset github.$config_key
  OK=$?
  msg_ok="Config key '$config_key' has been unset."
}

command:tokens() {
  basic-auth
  report-list \
    '/authorizations' \
    'token id note app/name'
}

format-entry:tokens() {
  if $raw_output || $quiet_output; then
    printf "%-7s\t%s\n" $3 "${4:-$5}"
  else
    printf "%d) %s %-14s  %s\n" $1 $2 "(id: $3)" "${4:-$5}"
  fi
}

command:token-new() {
  get-args '?note'
  local json
  if [ -n "$note" ]; then
    json="$(json-dump-object note "$note")"
  else
    json='{}'
  fi
  basic-auth
  api-post '/authorizations' "$json"
}

ok:token-new() {
  local token=$(JSON.get -s "/token" -)
  [ -n "$token" ] || die "Can't figure out token value"
  local id=$(JSON.get -n "/id" -)
  local note=$(JSON.get -s "/note" -)
  local name=$(JSON.get "/app/name" -)
  if $raw_output || $quiet_output; then
    out "$id"
  else
    # TODO out+ instead of printf?
    printf "Token created: %s %-14s  %s\n" \
      "$token" "(id: $id)" "${note:-$name}"
  fi
}

status-401:token-new() {
  if [ -n "$(grep "X-GitHub-OTP: required;" "$command_header_file")" ]; then
    err "2 Factor Auth needed"
    exit 2
  fi
}

command:token-get() {
  get-args token_id key
  basic-auth
  api-get "/authorizations/$token_id"
  OK || {
    msg_fail="Can't get token info for token-id=$token_id"
    return
  }
  local value=$(JSON.get -a "/$key" -)
  if [ -n "$value" ]; then
    msg_ok="$value"
  else
    msg_fail="Couldn't get value for '$key'"
    OK=1
  fi
}

command:token-delete() {
  get-args token_id
  basic-auth
  api-delete "/authorizations/$token_id"
  msg_ok="Token '$token_id' deleted"
}

command:scopes() {
  get-args token_id
  basic-auth
  api-get "/authorizations/$token_id"
}

ok:scopes() {
  local i=0 scopes scope
  while true; do
    scope=$(JSON.get -s "/scopes/$i" - 2>/dev/null || echo '')
    [ -z "$scope" ] && break
    scopes+=($scope)
    let i=i+1
  done

  if $raw_output || $quiet_output; then
    for scope in "${scopes[@]}"; do
      out "$scope"
    done
    return
  fi

  out
  out "The current scopes for token-id:$token_id are:"
  if [ ${#scopes[@]} -eq 0 ]; then
    out --None--
  else
    for scope in "${scopes[@]}"; do
      out "- $scope"
    done
  fi
  cat <<eos

Available scopes are:
  user          Read/write access to profile info only.
  user:email    Read access to a userâs email addresses.
  user:follow   Access to follow or unfollow other users.
  public_repo   Read/write access to public repos and organizations.
  repo          Read/write access to public and private repos and orgs.
  repo:status   Read/write access to public and private repo commit statuses.
  delete_repo   Delete access to adminable repositories.
  notifications Read access to a userâs notifications.
  gist          Write access to gists.

For more info, see: http://developer.github.com/v3/oauth/#scopes
eos
}

all_scopes=(
  user user:email user:follow
  public_repo repo repo:status delete_repo
  notifications gist
)
command:scope-add() {
  scopes=("${all_scopes[@]}")
  if $do_all; then
    get-args token_id
  else
    get-args token_id @scopes
  fi
  check-token-id "$token_id"
  basic-auth
  local array="$(json-dump-array ${scopes[*]})"
  local json="$(json-dump-object add_scopes "$array")"
  api-patch "/authorizations/$token_id" "$json"
  msg_ok="Scopes added: ${scopes[*]}"
}

command:scope-remove() {
  scopes=("${all_scopes[@]}")
  if $do_all; then
    get-args token_id
  else
    get-args token_id @scopes
  fi
  basic-auth
  local array="$(json-dump-array ${scopes[*]})"
  local json="$(json-dump-object remove_scopes "$array")"
  api-patch "/authorizations/$token_id" "$json"
  msg_ok="Scopes removed: ${scopes[*]}"
}

#------------------------------------------------------------------------------
# API calling functions:
#------------------------------------------------------------------------------
api-get() { api-call GET "$1" "$2"; }
api-post() { api-call POST "$1" "$2"; }
api-put() { api-call PUT "$1" "$2"; }
api-patch() { api-call PATCH "$1" "$2"; }
api-delete() { api-call DELETE "$1" "$2"; }

# Build a command to make the HTTP call to the API server, make the call, and
# check the result.
api-call() {
  format-curl-command "$@"

  if $verbose_output; then
    local cc="${curl_command[@]}"
    if ! $show_token; then
      [ -n "$api_token" ] &&
        cc="${cc/token $api_token/token ********}"
      [ -n "$GIT_HUB_PASSWORD" ] &&
        cc="${cc/$login:$GIT_HUB_PASSWORD/$login:********}"
    fi
    echo "$cc"$'\n' >&2
  fi

  if $dry_run; then
    nay '*** NOTE: This is a dry run only. ***'
    msg_ok=0
    return 0
  elif $repeat_command; then
    # Use the cache
    [ -e "$command_header_file" ] ||
      die "-R flag not valid. Command not previously run.\n"
    rc=0
  else
    local cache_dir="$GIT_HUB_CACHE/$command_sha1"
    mkdir -p "$cache_dir"
    # Actually run the curl command!
    (
      set +e
      # set -x  # for debugging the real command
      "${curl_command[@]}"
    )
    rc=$?
    cache-response-files
  fi

  $show_headers && cat $command_header_file >&2

  if [ -s "$command_output_file" ]; then
    JSON__cache="$(cat $command_output_file | JSON.load)"
    $show_output && cat $command_output_file >&2
    $show_json && JSON.cache >&2
  fi

  check-api-call-status $rc

  true
}

# Build curl command in a global array. This is the only way to preserve
# quoted whitespace.
format-curl-command() {
  local action=$1
  local url=$2
  local data=$3

  [[ $url =~ [a-zA-Z0-9]/(/|$) ]] &&
    die "API url '$url' looks suspiciously wrong"

  $use_auth && require-auth

  local user_agent=git-hub-$GIT_HUB_VERSION
  # Cheap trick to make github pretty-print the JSON output.
  $show_output && user_agent="curl-$user_agent"

  [[ "$url" =~ ^https?: ]] || url="$GIT_HUB_API_URI$url"

  curl_command=(
    curl
      --request $action
    $url
  )
  [ -n "$data" ] || [ "$action" = "PUT" ] && curl_command+=(-d "$data")
  if [ -n "$basic_auth" ]; then
    local login=$(get-login)
    if [ -n "$GIT_HUB_PASSWORD" ]; then
      curl_command+=(-u "$login:$GIT_HUB_PASSWORD")
    else
      curl_command+=(-u "$login")
    fi
    if [ -n "$GIT_HUB_2FA_OTP" ]; then
      curl_command+=(--header "X-GitHub-OTP: $GIT_HUB_2FA_OTP")
    fi
  elif [ -n "$api_token" ]; then
    curl_command+=(--header "Authorization: token $api_token")
  fi

  local sha1seed="${curl_command[@]}"
  [ -n "$api_token" ] && [ -n "$GIT_HUB_TEST_MAKE" ] &&
    sha1seed="${sha1seed/$api_token/0123456789abcdef0123456789abcdef01234567}"
  # echo "$sha1seed" >> sha1seed
  $show_output && sha1seed+=' -O'
  command_sha1="$(echo "$sha1seed" | $sha1sum | cut -d ' ' -f1)"
  command_header_file="$GIT_HUB_CACHE/$command_sha1/head"
  command_output_file="$GIT_HUB_CACHE/$command_sha1/out"
  command_error_file="$GIT_HUB_CACHE/$command_sha1/err"

  if ! $no_cache && [ -e "$command_header_file" ]; then
    etag="$(grep -Em1 '^ETag:' $command_header_file | tr -d '\r')"
    if [ -n "$etag" ]; then
      curl_command+=(--header "${etag/ETag/If-None-Match}")
    fi
  fi
  curl_command+=(
    --user-agent $user_agent
    --dump-header "$GIT_HUB_CACHE/head"
    --output "$GIT_HUB_CACHE/out"
    --stderr "$GIT_HUB_CACHE/err"
    --silent
    --show-error
  )
}

cache-response-files() {
  grep -E '^Status: 304' "$GIT_HUB_CACHE/head" &> /dev/null || {
    for f in head out err; do
      [ -e "$GIT_HUB_CACHE/$f" ] &&
        mv "$GIT_HUB_CACHE/$f" "$cache_dir"
    done
  }
}

check-api-call-status() {
  OK=$1
  if [ ! -f $command_header_file ]; then
    ERROR=$(head -n1 $command_error_file)
    if [ $OK == 6 ]; then
      ERROR+=$'\n'$'\n'"Check your internet connection."
      verbose_output=true
    fi
    return
  fi
  status_code=$(head -n1 $command_header_file | cut -d ' ' -f2)
  [[ $status_code =~ ^[0-9]{3}$ ]] || return
  case "$status_code" in
    200|201|202|204)
      OK=0
      ;;
    403)
      OK=1
      ERROR=$(JSON.get -s '/message' -)
      local regex='rate limit exceeded'
      if [[ "$ERROR" =~ "$regex" ]]; then
        ERROR="$ERROR Try the --use-auth option."
      fi
      ERROR=$(echo "$ERROR" | fmt -w 81)
      ;;
    *)
      OK=1
      ERROR=$(head -n1 $command_header_file | cut -d ' ' -f3-)
      ;;
  esac
}

OK() { return $OK; }

#------------------------------------------------------------------------------
# Argument parsing functions:
#------------------------------------------------------------------------------
get-args() {
  local specs=("$@")
  local args=("${command_arguments[@]}")

  while [ ${#specs[@]} -gt 0 ]; do
    local optional=false
    local spec="${specs[0]}"
    local arg="${args[0]}"
    if [[ "$spec" =~ ^\? ]]; then
      optional=true
      spec=${spec#\?}
      if [[ $spec =~ / ]] && [[ ! $spec =~ : ]] && [[ ! $arg =~ / ]]; then
        specs=("${specs[@]:1}")
        continue
      fi
      if [ ${#args[@]} -lt ${#specs[@]} ] && [[ ! "${specs[1]}" =~ ^\? ]]; then
        if [[ "$spec" =~ : ]]; then
          arg=''
          spec-assign
        else
          printf -v "$spec" ""
        fi
      else
        spec-assign
        args=("${args[@]:1}")
      fi
    elif [[ "$spec" =~ ^-- ]]; then
      keyword-assign
    else
      if [ ${#args[@]} -eq 0 ]; then
        spec-assign
      else
        spec-assign
        args=("${args[@]:1}")
      fi
    fi
    specs=("${specs[@]:1}")
  done
  if [ ${#args[@]} -gt 0 ]; then
    die "Unknown argument(s): '${args[*]}'"
  fi
}

keyword-assign() {
  local kargs=(${args[@]})
  args=()
  for ((i = 0; i < ${#kargs[@]}; i++)); do
    if [ "${kargs[$i]}" == "$spec" ]; then
      i=$((i + 1))
      local var="${spec#--}"
      local val="${kargs[$i]}"
      [ "$val" == '@' ] && val="$login"
      printf -v "$var" "$val"
    elif [[ "${kargs[$i]}" =~ ^$spec=(.*) ]]; then
      local var="${spec#--}"
      local val="${BASH_REMATCH[1]}"
      [ "$val" == '@' ] && val="$login"
      printf -v "$var" "$val"
    else
      args+=("${kargs[$i]}")
    fi
  done
}

spec-assign() {
  [[ "$spec" =~ / ]] && slash-assign && return
  [[ "$spec" =~ ^% ]] && hash-assign && return
  [[ "$spec" =~ ^@ ]] && array-assign && return
  local spec="$spec"
  local arg="$arg"
  [ "$arg" == '@' ] && arg="$login"
  local var=${spec/:*/}
  [[ $spec =~ : ]] && spec=${spec#$var:} || spec=
  if [ -z "$arg" ]; then
    for func in ${spec/:/ }; do
      if [ "$func" == 'empty' ]; then
        printf -v "$var" ""
        return
      elif [[ "$func" =~ ^\'(.*)\'$ ]]; then
        printf -v "$var" "${BASH_REMATCH[1]}"
        return
      fi
      arg="$($func)"
      [ -n "$arg" ] && break
    done
  fi
  if [ -n "$arg" ]; then
    printf -v "$var" "$arg"
  else
    die "Can't find a value for '$var'\n"
  fi
}

slash-assign() {
  local spec1=${spec/\/*/}
  local spec2=${spec#$spec1/}
  local arg1= arg2=
  if [[ "$arg" =~ / ]]; then
    local arg1=${arg/\/*/}
    local arg2=${arg#$arg1/}
  elif $optional; then
    local arg1=''
    local arg2="$arg"
  else
    die "Invalid value '$arg' for '$spec'"
  fi
  local spec="$spec1"
  local arg="$arg1"
  spec-assign
  local spec="$spec2"
  local arg="$arg2"
  spec-assign
}

hash-assign() {
  if [ $(( ${#args[@]} % 2)) -eq 1 ]; then
    die "Odd number of items for key/value pairs"
  fi
  local spec=${spec#%}
  eval $spec=\(\"\${args[@]}\"\)
  args=()
}

array-assign() {
  local spec=${spec#@}
  eval $spec=\(\"\${args[@]}\"\)
  args=()
}

get-user() {
  get-owner || get-login || return 1
  return 0
}

get-login() {
  get-hub-config login
}

get-owner() {
  get-repo-config owner
}

get-repo() {
  get-repo-config repo
}

get-repo-config() {
  local url=$(
    git remote -v 2> /dev/null |
      grep 'github\.com' |
      head -n1
  )
  url=$(shopt -s extglob; echo ${url% (@(fetch|push))})
  if [ -n "$url" ]; then
    if [[ "$url" =~ github\.com ]]; then
      [[ "$url" =~ .*://(.*) ]] &&
        url="${BASH_REMATCH[1]}"
      local re1='^[^:/]*[:/](.*)/(.*)\.git$'
      local re2='^[^:/]*[:/](.*)/(.*)$'
      if [[ "$url" =~ $re1 ]] || [[ "$url" =~ $re2 ]]; then
        if [ "$1" == owner ]; then
          echo "${BASH_REMATCH[1]}"
        else
          echo "${BASH_REMATCH[2]}"
        fi
        return 0
      fi
    fi
  fi
  return 1
}

get-remote-name() {
  [ -n "$remote_name" ] && return
  local remotes=($(git config --get-regex 'remote\..*\.fetch' | cut -d ' ' -f1))
  local num="${#remotes[@]}"
  if [ $num -eq 1 ]; then
    remote_name="${remotes[0]}"
    remote_name=${remote_name#remote.}
    remote_name=${remote_name%.fetch}
  elif [ $num -eq 0 ]; then
    die "This command requires a remote name, but the current repo has no remotes. Add a remote or use the --remote= option."
  else
    die "This command requires a remote name, but the current repo has more than one remote. Use the --remote= option to specify which one."
  fi
}

require-auth() {
  [ -z "$api_token" ] && get-var api-token
  [ -z "$api_token" ] && need-api-token
  true
}

basic-auth() {
  basic_auth=1
}

check-token-id() {
  local id="$1"
  [ ${#id} -eq 40 ] &&
    die "'$command' requires a *token-id*, not a *token-value*."
  local regex='^[0-9]+$'
  [[ "$id" =~ $regex ]] ||
    die "'$id' is invalid token-id. Must be an integer value."
  true
}

get-hub-config() {
  local value=
  if [ -e "$GIT_HUB_CONFIG" ]; then
    value="$(git config -f "$GIT_HUB_CONFIG" github."$1" 2>/dev/null)"
  fi
  echo "${value:-$2}"
}

#------------------------------------------------------------------------------
# List processing functions:
#------------------------------------------------------------------------------
report-list() {
  msg_ok=0
  local url="$1" fields=($2) ii
  local list_max=${list_size:-$(($terminal_lines - 2))}
  local line_max=$terminal_cols
  local per_page=100
  [ $per_page -gt $list_max ] && per_page=$list_max
  url=${url/PER_PAGE/$per_page}
  [ -n "$title" ] && say "$title"
  local list_counter=1
  while true; do
    api-get $url
    OK || return 0
    json-var-list "${fields[@]}"
    local page_size=$(JSON.cache | tail -n1 | cut -d '/' -f2)
    [ -z "$page_size" ] && say '--None--' && break
    local counter=0
    for ((ii = 0; ii <= page_size && counter < list_max; ii++)); do
      local -a values=()
      for field in "${fields[@]}"; do
        var="${field//\//__}"_"$ii"
        values+=("${!var}")
      done
      local output_line=
      if can "format-entry:$command"; then
        "format-entry:$command" $list_counter "${values[@]}"
      else
        default-format-entry $list_counter "${values[@]}"
      fi
      if [ -n "$output_line" ]; then
        if interactive; then
          out "$output_line" | cut -c 1-$line_max
        else
          out "$output_line"
        fi
      fi
      let counter=counter+1
      let list_counter=list_counter+1
      [ -n "$list_size" ] && [ $list_counter -gt $list_size ] && return
    done
    url=$(get-next-page-url)
    if interactive; then
      if [ $list_counter -gt $list_max ]; then
        if [ -n "$url" -o $ii -lt $page_size ]; then
          local prompt_msg=--More--
          prompt
        fi
      fi
    fi
    [ -n "$url" ] || break
  done
}

get-next-page-url() {
  local regexp='Link: <(https:[^>]+)>; rel="next"'
  [[ -e "$command_header_file" ]] &&
    [[ "$(< $command_header_file)" =~ $regexp ]] &&
    echo "${BASH_REMATCH[1]}"
  true
}

default-format-entry() {
  if $raw_output; then
    out "$2"
  else
    printf "%d) %s\n" "$1" "$2"
  fi
}

normalize-multiline-text-output() {
  text="$1"
  local indent="$2"
  text=${text//\\\"/\"}
  text=${text//\\r/}
  text=${text//\\n/$'\n'}
  text="$(
    echo "$text" | (
      local start=false blank=false para=false code=false output=''
      IFS=''
      while read -r line; do
        if [[ "$line" =~ [^[:space:]] ]]; then
          if $blank && $start; then
            output+=$'\n'
          fi
          if [[ "$line" =~ ^\  ]]; then
            output+="$indent$line"$'\n'
            code=true para=false
          else
            output+="$( echo "$indent$line" | fmt -w 81 )"$'\n'
            para=true code=false
          fi
          start=true blank=false
        else
          if $para || $code; then
            para=false code=false
          fi
          blank=true
        fi
      done
      if [ -n "$output" ] && ! $code; then
        output+=$'\n'
      fi
      echo -n "$output"
    )
  )"
}

#------------------------------------------------------------------------------
# Report formatting functions:
#------------------------------------------------------------------------------
report-data() {
  if $json_output; then
    pretty-json-object "${fields[@]}"
  else
    json-prune-hash "${fields[@]}"
    for field in "${fields[@]}"; do
      local skip="skip_field_$field"
      [ -n "${!skip}" ] && continue
      report-value $field
    done
    ! $raw_output && echo
  fi
}

report-value() {
  local key=${1//__/\/}
  local value=$(JSON.get -a "/$key" -)
  local label="$key"
  if [ "$key" == created_at ]; then
    value="${value%T*}"
  elif [ "$key" == pushed_at ]; then
    value="${value/T/ }"
    value="${value/Z/}"
  fi
  if ! $raw_output; then
    local var="label_$1"
    label="${!var}"
    if [ -z "$label" ]; then
      label=$(echo "$1" | tr '_' ' ')
      label=$(
        for word in $label; do
          title=`echo "${word:0:1}" | tr a-z A-Z`${word:1}
          echo -n "$title "
        done
      )
      label="${label% }"
    fi
  fi
  if [ -n "$label" -a -n "$value" ]; then
    if $raw_output; then
      printf "%s\t%s\n" "$label" "$value"
    else
      value="${value%%\\n}"
      if [ ${#value} -ge 80 ] ||
         [[ "$value" =~ \\n ]] ||
         [ "$label" == Description ]
      then
        echo "$label:"
        normalize-multiline-text-output "$value" " "
        echo "$text"
      else
        printf "%-15s %s\n" "$label" "$value"
      fi
    fi
  fi
}

label_user__login='User'
label_blog='Web Site'
label_watchers='Stars'
label_homepage='Web Site'
label_html_url='GitHub Page'
label_ssh_url='Remote URL'
label_parent__full_name='Forked From'
label_source__full_name='Fork Parent'
label_number='ID #'

#------------------------------------------------------------------------------
# Initial setup functions:
#------------------------------------------------------------------------------
init-env() {
  [ -z "$HOME" ] && die "Cannot determine HOME directory"

  sha1sum=sha1sum
  [[ "$OSTYPE" =~ ^darwin ]] && sha1sum=shasum
  check-system-commands curl cut git grep head ln mv readlink $sha1sum tr

  : ${GIT_HUB_API_URI:=https://api.github.com}

  : ${GIT_HUB_EXEC_PATH:="$(dirname "${BASH_SOURCE[0]}")"}
  : ${GIT_HUB_EXT_PATH:=$GIT_HUB_EXEC_PATH/git-hub.d}

  : ${GIT_HUB_USER_DIR:=$HOME/.git-hub}
  : ${GIT_HUB_CONFIG:=$GIT_HUB_USER_DIR/config}
  : ${GIT_HUB_CACHE:=$GIT_HUB_USER_DIR/cache}

  : ${GIT_HUB_EDITOR:=${EDITOR:-vim}}
  : ${GIT_HUB_PAGER:=${PAGER:-less}}

  [ -d "$GIT_HUB_EXT_PATH" ] ||
    die "Hmm... git-hub does not seem to be properly installed\n"
  true
}

init-vars() {
  terminal_cols=${GIT_HUB_TEST_COLS:-$(tput cols)}
  terminal_lines=${GIT_HUB_TEST_LINES:-$(tput lines)}
  get-var list-size
  get-var-bool use-auth
  get-var-bool no-cache
  get-var-bool quiet-output
  get-var-bool verbose-output
  get-var-bool show-token
}

run-for-each() {
  local elem
  for elem in "$@"; do
    [ "$elem" == '=' ] && split_words=true
    [[ "$elem" =~ ^[-=]$ ]] && return 0
  done
  return 1
}

assert-env() {
  assert-env-var EXEC_PATH EXT_PATH API_URI \
    USER_DIR CONFIG CACHE

  source-ext json-setup.bash
}

check-system-commands() {
  local missing=false
  local cmd
  for cmd in $@; do
    if ! $(type $cmd &> /dev/null); then
      echo "Required shell command not found: '$cmd'"
      missing=true
    fi
  done
  $missing && exit 1
  true
}

source-ext() {
  PATH=$GIT_HUB_EXT_PATH:$PATH source "$1"
}

source-ext-maybe() {
  set +e
  PATH=$GIT_HUB_EXT_PATH:$PATH source "$1" 2> /dev/null
  local rc=$?
  set -e
  return $rc
}

assert-env-var() {
  local var
  for var in $@; do
    var=GIT_HUB_$var
    [ -n "${!var}" ] ||
      die "'$var' is not set"
  done
}

get-opts() {
  [ $# -eq 0 ] && set -- --help

  eval "$(
    echo "$OPTIONS_SPEC" |
      git rev-parse --parseopt -- "$@" ||
    echo exit $?
  )"

  while [ $# -gt 0 ]; do
    local option="$1"; shift
    case "$option" in
      -c)
        list_size=$1
        shift
        ;;
      -a)
        list_size=$Infinity
        do_all=true
        ;;
      --org)
        set-var organization "$1"
        shift
        ;;
      --remote)
        set-var remote_name "$1"
        shift
        ;;
      --branch)
        set-var branch_name "$1"
        shift
        ;;

      -q) quiet_output=true ;;
      -v) verbose_output=true ;;
      -r)
        raw_output=true
        quiet_output=true
        ;;
      -j) json_output=true ;;

      -A) use_auth=true ;;
      -C) no_cache=true ;;
      --token)
        api_token="$1"
        shift
        ;;
      -d) dry_run=true ;;
      -T)
        show_token=true
        verbose_output=true
        quiet_output=false
        ;;

      --) break ;;

      # Debug options:
      -O) show_output=true ;;
      -H) show_headers=true ;;
      -J) show_json=true ;;
      -x) set -x ;;
      -R) repeat_command=true ;;

      *) die "Unexpected option: $option" ;;
    esac
  done

  [ -z "$list_size" ] && ! interactive && list_size=$Infinity

  command="$1"; shift
  command_arguments=("$@")

  [[ "$command" == "setup" ]] ||
  [[ "$command" = "config" ]] ||
  [[ "$command" = "config-unset" ]] ||
  ! (callable-or-source "$command") ||
    check-config

  true
}

interactive() {
  if [ -t 0 -a -t 1 ]; then
    return 0
  else
    return 1
  fi
}

pipeline() {
  if [ -t 0 -a -t 1 ]; then
    return 1
  else
    return 0
  fi
}

set-var() {
  local name="$1"
  local value="$2"
  if [ "$value" == '@' ]; then
    login="$(git config -f "$GIT_HUB_CONFIG" github.login || echo '')"
    value="$login"
  fi
  printf -v "$name" "$value"
}

check-config() {
  [ -e "$GIT_HUB_CONFIG" ] || config-not-setup
  local user_name="$(
    git config -f "$GIT_HUB_CONFIG" github.user-name || echo ''
  )"
  login="$(git config -f "$GIT_HUB_CONFIG" github.login || echo '')"
  if [[ -n "$user_name" ]] || [[ -z "$login" ]]; then
    config-not-setup
  fi
}

get-var() {
  local var=${1//-/_}
  [ -n "${!var}" ] && return
  local env=GIT_HUB_$(echo $var | tr 'a-z' 'A-Z')
  printf -v "$var" "${!env}"
  [ -n "${!var}" ] && return
  printf -v "$var" "$(get-hub-config "$1")"
  true
}

get-var-bool() {
  get-var $1
  local var=${1//-/_}
  [ -z "${!var}" ] && printf -v $var false
  [ "${!var}" != false ] && printf -v $var true
  true
}

#------------------------------------------------------------------------------
# Detailed error messages:
#------------------------------------------------------------------------------
need-api-token() {
  cat <<...

Can't determine your Personal API Access Token, which is required by this
command. Usually you put your token into the ~/.git-hub/config file, like this:

  git hub config api-token <your-personal-api-access-token>

You can also specify the token using the --token= commandline option, or via
the GIT_HUB_API_TOKEN environment variable.

To list your API tokens:

  git hub tokens

To create a new api token:

  git hub token-new "my git-hub token"
  # You should probably add at least the 'repo' and 'user' scopes:
  git hub scope-add <token-id> repo user

You can also just run setup command, and it will guide you:

  git hub setup

Would you like to run it now?

...
  prompt-to-run-setup
}

config-not-setup() {
  cat <<...

Greetings!!!

You seem to be a a brand new 'git hub' user, since your config is not setup.

The 'git-hub' should soon be your new best friend. Configuration is really
easy. Just run the following command and answer a few simple questions:

  git hub setup

which will guide you through the setup process. Press <ENTER> to run it now.

NOTE: You can also do the setup process by hand using the 'config', 'token'
      and 'scope' commands. See the 'git help hub' documentation for more
      information on these commands. Or just manually create a config file
      in ~/.git-hub/config that looks like this:

  [github]
          login = your-github-login-id
          api-token = c956f87abab2da54882cc1f1ade42efcc2b15dc7
          json-lib = json-perl.bash
          use-auth = 1

Would you like start the automated 'setup' process right now? (Do it!)

...
  prompt-to-run-setup
}

prompt-to-run-setup() {
  prompt
  source-ext git-hub-setup
  command:setup || exit 1
  exit 0
}

#------------------------------------------------------------------------------
# Reusable helper functions:
#------------------------------------------------------------------------------
editor-title-body() {
  local msg_file=.git/GIT_HUB_EDIT_MSG

  rm -f $msg_file

  local comment=false
  if [ $# -eq 2 -a "$1" == comment ]; then
    comment=true
    shift
  fi

  echo "$1" > $msg_file

  $GIT_HUB_EDITOR $msg_file
  local line
  body=''
  if ! $comment; then
    title="$(head -n1 "$msg_file")"
    if [[ ! "$title" =~ [^[:space:]] ]]; then
      msg_fail="No title provided. Aborting. See '$msg_file'."
      die "$msg_fail"
      return 1
    fi
    line="$(head -n2 "$msg_file" | tail -n1)"
    if [[ ! "$line" =~ ^\s*$ ]] && [[ ! "$line" =~ ^\# ]]; then
      msg_fail="Malformed message in '$msg_file'"
      die "$msg_fail"
      return 1
    fi
  fi
  local count=0
  while read line; do
    ! $comment && [[ $((count++)) < 2 ]] && continue
    [[ "$line" =~ ^\# ]] && break
    body+="$line"$'\n'
  done < $msg_file
}

#------------------------------------------------------------------------------
# General purpose functions:
#------------------------------------------------------------------------------

quiet_output=false
say() { ! $quiet_output && out "$@"; true; }
say-() { ! $quiet_output && out- "$@"; true; }
nay() { ! $quiet_output && err "$@"; true; }
nay-() { ! $quiet_output && err- "$@"; true; }
out() { echo -e "$@" >&1; }
out-() { echo -en "$@" >&1; }
err() { echo -e "$@" >&2; }
err-() { echo -en "$@" >&2; }

prompt() {
  local msg answer default yn=false password=false
  case $# in
    0) msg=${prompt_msg:-'Press <ENTER> to continue, or <CTL>-C to exit.'} ;;
    1)
      msg="$1"
      if [[ "$msg" =~ \[yN\] ]]; then
        default='n'
        yn=true
      elif [[ "$msg" =~ \[Yn\] ]]; then
        default='y'
        yn=true
      fi
      ;;
    2)
      msg="$1"
      default="$2"
      ;;
    *) die "Invalid usage of prompt" ;;
  esac
  if [[ "$msg" =~ [Pp]assword ]]; then
    password=true
    msg=$'\n'"$msg"
  fi
  while true; do
    if $password; then
      read -s -p "$msg" answer
    else
      read -p "$msg" answer
    fi
    [ $# -eq 0 ] && return 0
    [ -n "$answer" -o -n "$default" ] && break
  done
  if $yn; then
    [[ "$answer" =~ ^[yY] ]] && echo y && return 0
    [[ "$answer" =~ ^[nN] ]] && echo n && return 0
    echo "$default"
    return 0
  fi
  if [ -n "$answer" ]; then
    echo "$answer"
  else
    echo "$default"
  fi
}

callable-or-source() {
  if can "command:$1"; then
    return 0
  else
    if source-ext-maybe git-hub-"${1/:*/}" && can "command:$1"; then
      return 0
    elif source-ext-maybe git-hub-"${1%s}" && can "command:$1"; then
      return 0
    elif source-ext-maybe git-hub-"${1/-*/}" && can "command:$1"; then
      return 0
    fi
  fi
  return 1
}

assert-inside-git-repo() {
  inside-git-repo ||
    die "Not inside a git repo"
}

assert-repo-top-level() {
  [ "$(git rev-parse --git-dir)" == '.git' ] ||
    die "Not at top level directory of repo"
}

assert-git-repo-is-clean() {
  # Repo is in a clean state:
  git update-index -q --ignore-submodules --refresh
  git diff-files --quiet --ignore-submodules ||
    die "Unstaged changes."
  git diff-index --quiet --ignore-submodules HEAD ||
    die "Working tree has changes."
  git diff-index --quiet --cached --ignore-submodules HEAD ||
    die "Index has changes."
}

assert-git-on-branch() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  [ -n "$branch" -a "$branch" != "HEAD" ] ||
    die "Repo HEAD is not currently on a branch"
}

assert-git-head-is-pushed() {
  local ref=$(git rev-parse HEAD)
  local branch=$(git rev-parse --abbrev-ref HEAD)
  local text="$(
    git branch -r --contains $ref 2> /dev/null |
      grep "$remote_name/$branch"
  )"
  [ -n "$text" ] ||
    die "Current HEAD is not pushed to remote '$remote_name'"
}

inside-git-repo() {
  (git rev-parse --is-inside-work-tree &> /dev/null)
}

#------------------------------------------------------------------------------
# Test overrides:
#------------------------------------------------------------------------------
if [ -n "$GIT_HUB_TEST_RUN" ]; then
  source git-hub-test-run
fi

if [ -n "$GIT_HUB_TEST_MAKE" ]; then
  source git-hub-subclass
fi

#------------------------------------------------------------------------------
# Begin at the end!
#------------------------------------------------------------------------------
[ "${BASH_SOURCE[0]}" == "$0" ] && main "$@"

true

# vim: set lisp:
