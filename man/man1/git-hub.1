'\" t
.\"     Title: git-hub
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 04/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-HUB" "1" "04/25/2014" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-hub \- The Git command for GitHub \- image:https://travis\-ci\&.org/ingydotnet/git\-hub\&.png[link="https://travis\-ci\&.org/ingydotnet/git\-hub"]
.SH "SYNOPSIS"
.sp
Here are just a few of the things you can do on GitHub with a simple command:
.sp
.nf
git hub                             # Show the `git hub` cheat sheet
git hub help                        # Show this awesome documentation
git hub setup                       # Config dialog\&. Do this first!
.fi
.sp
.nf
git hub user <user>                 # Get info about a user
git hub repos <owner>               # List recent repositories
git hub repo\-new <repo>             # Create a new repository
git hub fork <owner>/<repo>         # Fork a repository
git hub clone <owner>/<repo>        # Clone a GitHub repository
                                    # Set/Change your repo description
git hub repo\-edit <repo> description \*(AqJust another GitHub repo\*(Aq
git hub repo\-delete <owner>/<repo>  # Delete a repository
git hub followers <user>            # List a user\*(Aqs followers
git hub star ingydotnet/git\-hub     # Star this repository
git hub watch ingydotnet/git\-hub    # Watch this repository
git hub follow ingydotnet           # Follow this author
git hub trust ingydotnet            # Add collaborators to repo
                                    # Stalk all your followers
git hub followers \-ra | git hub user \-
.fi
.SH "DESCRIPTION"
.sp
The \fBhub\fR subcommand for git, allows you to perform many of the operations made available by GitHub\(cqs v3 REST API, from the git commandline command\&.
.sp
You can fork, create, delete and modify repositories\&. You can get information about users, repositories and issues\&. You can \fBstar\fR, \fBwatch\fR and \fBfollow\fR things, and find out who else is doing the same\&. The API is quite extensive\&. With this command you can do many of your day to day GitHub actions without needing a web browser\&.
.sp
You can also chain commands together using the output of one as the input of another\&. For example you could use this technique to clone all the repos of a GitHub user or organization, with one command\&. See PIPE AND EACH below\&.
.SH "INSTALLATION"
.sp
Get the source code from GitHub:
.sp
.if n \{\
.RS 4
.\}
.nf
git clone git@github\&.com:ingydotnet/git\-hub
.fi
.if n \{\
.RE
.\}
.sp
Then simply add the lib and man directories to your PATH and MANPATH:
.sp
.if n \{\
.RS 4
.\}
.nf
export PATH=/path/to/git\-hub/lib:$PATH
export MANPATH=/path/to/git\-hub/man:$MANPATH
.fi
.if n \{\
.RE
.\}
.sp
To do a proper system install, which puts git\-hub next to your other git commands, do this instead:
.sp
.if n \{\
.RS 4
.\}
.nf
make install        # Possibly with \*(Aqsudo\*(Aq
.fi
.if n \{\
.RE
.\}
.SH "UPGRADING"
.sp
If you used the PATH method of installation, just run this to upgrade git\-hub:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub upgrade
.fi
.if n \{\
.RE
.\}
.sp
If you used make install method, then:
.sp
.if n \{\
.RS 4
.\}
.nf
cd /path/to/git\-hub
git pull
make install
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.sp
Commandline options start with a dash and can appear in any order in the command\&. Long form commands that require an argument can use \fI=\fR or not:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-count=5
\-\-count 5
.fi
.if n \{\
.RE
.\}
.PP
\-c <number>, \-\-count=<number>
.RS 4
This option is for commands that return a list of things\&. Specify the number of items you want the command to return\&. Each list command has a reasonable default value\&.
.RE
.PP
\-a, \-\-all
.RS 4
Show all elements for list commands\&. Also applies to a few other commands as documented\&.
.RE
.PP
\-r, \-\-raw
.RS 4
For commands the produce lists, just list the raw data\&. For commands that produce reports, show the raw storage keys, rather than the human friendly ones\&. You will need the raw keys to edit/change values\&.
.RE
.PP
\-j, \-\-json
.RS 4
For some commands, you can get the raw data in JSON\&.
.RE
.PP
\-
.RS 4
This option, just a single
\fI\-\fR, is small but very powerful\&. It means to read the next line from stdin, and put the content into the command at that point\&. See PIPE and EACH below\&.
.RE
.PP
=
.RS 4
Like the \*(Aq\-\*(Aq\ \&command above, but reads each
\fBword\fR
from stdin\&.
.RE
.PP
\-h
.RS 4
Show the brief command usage\&.
.RE
.PP
\-\-help
.RS 4
Show the full documentation\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Show minimal output\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Show detailed output\&. Notably, show the raw command that is used for the GitHub API calls\&.
.RE
.PP
\-\-token=<api\-token>
.RS 4
Set or override the api\-token required by the command\&. This value can also come from the
GIT_HUB_API_TOKEN
environment variable\&. Usually this value comes from your
~/\&.git\-hub/config
file\&.
.RE
.PP
\-d, \-\-dryrun
.RS 4
Don\(cqt actually make the API call\&. This option turns on verbose mode\&.
.RE
.PP
\-T
.RS 4
Show the API token in the verbose output\&. Hidden by default\&. This option turns on verbose mode\&.
.RE
.PP
\-A, \-\-use\-auth
.RS 4
Use authentication whether or not it is needed for a certain command\&. This is useful if you have exceeded your hourly GitHub API rate limit, which is 60 calls unauthenticated, and 5000 calls authenticated\&.
.RE
.PP
\-C, \-\-no\-cache
.RS 4
There are currently known bugs in GitHub\(cqs cache headers\&. If the content seems stale, use this option\&.
.RE
.SH "DEBUG OPTIONS"
.sp
There are a number of debug options that will give you lots of extra information (albeit in a less pretty format)\&.
.PP
\-O
.RS 4
Show the API reponse output\&. Always in JSON format\&. JSON is pretty\-printed\&.
.RE
.PP
\-H
.RS 4
Show the API response headers\&.
.RE
.PP
\-J
.RS 4
Show the API response JSON, in decoded form\&.
.RE
.PP
\-R
.RS 4
Repeat the last command, using the previous API server response\&. Useful for development and debugging\&. (Beware, only caches the most recent API call, so not really good for commands that make multiple calls)\&.
.RE
.PP
\-x
.RS 4
Turn on Bash
\-x
debugging\&. This will show every bash command executed in the program\&. This is extremely useful to track down nasty bugs\&.
.RE
.SH "ARGUMENTS"
.sp
The git hub command gets its input values from these sources (in this order):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commandline
\fBarguments\fR
(see specific command, below)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Environment variables of the form
GIT_HUB_VARIABLE_NAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\&./\&.git/config
file\&. (The repo you are issuing commands from)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
~/\&.githubconfig
file\&.
.RE
.sp
Most of the commands described below have arguments\&. This section defines each of the argument types\&. Note that argument values that are strings containing whitespace need to be quoted\&.
.sp
Argument variable names are always indicated by angle brackets, like: <variable>\&. Arguments listed in square brackets are optional and arguments followed by \&.\&.\&. indicate that more than one is allowed\&.
.PP
<user>
.RS 4
A GitHub user name\&. Sometimes an organization name can be used instead\&. If this argument is optional, it defaults to the GitHub owner of the repo you are currently in\&. If you are not in a GitHub repo, it defaults to your login\&.
\fBOverride\fR:
GIT_HUB_USER_NAME
environment variable\&.
.RE
.PP
<owner>
.RS 4
A GitHub user or organization that owns the repository being specified\&. This value defaults much like the
<user>
argument (above)\&.
\fBOverride\fR:
GIT_HUB_OWNER_NAME
environment variable\&.
.RE
.PP
<org>
.RS 4
A GitHub organization name\&.
\fBOverride\fR:
GIT_HUB_ORG_NAME
environment variable\&.
.RE
.PP
<repo>
.RS 4
A GitHub repository name\&. If this argument is optional, it defaults to the GitHub repo name of the repo you are currently in\&.
\fBOverride\fR:
GIT_HUB_REPO_NAME
environment variable\&.
.RE
.PP
<owner>/<repo>
.RS 4
Many commands need both an owner and repo separated by a slash\&. If the owner is you (your GitHub login) you can omit it (but you still need the leading slash)\&. Like
/myrepo, instead of
me/myrepo\&. If this argument is optional, it defaults the the owner and repo of the GitHub repo you are in\&.
.RE
.PP
<key\-value\-pair>
.RS 4
Two strings separated by whitespace\&. Values with embedded whitespace should be quoted\&. The documentation of each command that needs these pairs, will list the valid keys\&.
.RE
.PP
<api\-token\-id>
.RS 4
The integer number
\fBid\fR
of a token (not the 40 hex\-character value)\&.
.RE
.PP
<scope\-name>
.RS 4
One of the GitHub scopes that you can apply to a token\&. The
git hub scopes
command will tell you all of these, and what they mean\&.
.RE
.SH "PLUGINS"
.sp
You get tons of useful commands by default, and they are all listed and documented in the next section below\&. But git\-hub also supports third party plugin commands\&. The ones I know about are list here:
.PP
git\-hub\-travis
.RS 4

\m[blue]\fBhttps://github\&.com/carloslima/git\-hub\-travis\fR\m[]
Enable and/or disable travis\-ci testing from the command line\&.
.RE
.sp
Well OK, I only know about this one, and yes, I helped Carlos write it\&. But trust me, it\(cqs easy\&. What are you waiting for?
.SH "COMMANDS"
.sp
These are the commands you can use to perform most of your daily GitHub interactions from the command line\&. They are installed by default\&.
.PP
help
.RS 4
Show this manpage\&.
.RE
.PP
setup
.RS 4
Before you can use the commands described below, you need to perform some setup/configuration steps\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This "wizard" style dialog, will walk you through the configuration
process quickly and painlessly, with lots of explanation\&. You should run
this command right away\&. You can also re\-run it, and it will allow you to
change your config, while defaulting to your existing settings\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you would rather do the steps by hand, see CONFIGURATION COMMANDS
below\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
upgrade
.RS 4
Upgrade the
git\-hub
installation to the latest version\&.
.RE
.PP
user [<user>]
.RS 4
Show basic information about a specific user\&. User defaults to the owner of the current repo, or your login if you are not inside a repo directory\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
user\-get <user> <data\-key>
.RS 4
Get a specific data value for a particular user\&.
.RE
.PP
user\-edit <key\-value\-pair>\&...
.RS 4
Set specific fields of your user info to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following user keys: `name`, `email`, `blog`,
`location`, `company`, `bio`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
orgs [<user>]
.RS 4
List the organizations that a user is a member of\&.
.RE
.PP
org <org>
.RS 4
Show basic information about a GitHub organization\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
org\-get <org> <data\-key>
.RS 4
Get a specific data value for a particular organization\&.
.RE
.PP
org\-edit <org> <key\-value\-pairs>\&...
.RS 4
Set specific meta\-data fields of an organization to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following organization keys: `name`, `email`,
`billing_email`, `blog`, `location`, `company`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
members <org>
.RS 4
List the members of an organization\&.
.RE
.PP
teams <org>
.RS 4
List the teams in an organization\&.
.RE
.PP
followers [<user>]
.RS 4
List the people who are followers of a user\&.
.RE
.PP
follows <user> [<target\-user>]
.RS 4
Check if <user> follows <target\-user>\&. The default target user is you\&.
.RE
.PP
following [<user>]
.RS 4
List the people that a user is following\&.
.RE
.PP
follow <user>\&...
.RS 4
Follow one or more users\&.
.RE
.PP
unfollow <user>\&...
.RS 4
Stop following one or more users\&.
.RE
.PP
clone ([<owner>/]<repo> [<directory>])\&...
.RS 4
Clone a GitHub repo\&. Always uses
\-\-recursive
so you get submodules too\&. You can specifiy a list of repos\&. If you specify a directory for a repo, it should be an absolute path name or else begin with
\fI\&./\fR
or
\fI\&.\&./\fR
so that it can be distinguished from another repo name\&.
.RE
.PP
repos [<user>]
.RS 4
List the repos for a user or organization\&. List is returned in order of recent activity\&.
.RE
.PP
repo [<repo>]
.RS 4
Show basic information about a specific repository\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
repo\-get <owner>/<repo> <data\-key>
.RS 4
Get a specific data value for a particular repository\&.
.RE
.PP
repo\-edit [<owner>/]<repo> <key\-value\-pair>\&...
.RS 4
Set specific meta\-data fields of a repository to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following repo keys: `description`, `homepage`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
repo\-new [<org>/]<repo>
.RS 4
Create a new GitHub repository\&.
.RE
.PP
repo\-delete <owner>/<repo>
.RS 4
Delete a GitHub repository\&.
.RE
.PP
forks [<owner>/<repo>]
.RS 4
List the forks of a repository\&.
.RE
.PP
fork <owner>/<repo> [<org>]
.RS 4
Fork a repository to your account or to an organization\&.
.RE
.PP
stars [<owner>/<repo>]
.RS 4
Show what users have starred a repository\&.
.RE
.PP
star [<owner>/<repo>]
.RS 4
Add your
\fBstar\fR
to a repository\&.
.RE
.PP
unstar [<owner>/<repo>]
.RS 4
Add your
\fBstar\fR
to a repository\&.
.RE
.PP
starred [<user>]
.RS 4
List repositories that a user has starred\&.
.RE
.PP
watch [<owner>/<repo>]
.RS 4
Start watching a repo\&.
.RE
.PP
unwatch [<owner>/<repo>]
.RS 4
Stop watching a repo\&.
.RE
.PP
collabs [<owner>/<repo>]
.RS 4
List current collaborators for a repository\&.
.RE
.PP
trust [<owner>/<repo>] <user>\&...
.RS 4
Add one or more collaborators to a repository\&.
.RE
.PP
untrust [<owner>/<repo>] <user>\&...
.RS 4
Remove one or more collaborators from a repository\&.
.RE
.PP
issues [<owner>/<repo>]
.RS 4
List the issues for a repo\&.
.RE
.PP
issue [<owner>/<repo>] <issue\-id\-number>
.RS 4
Show info (including any comments) for a specific issue\&. If no issue number is given, this command will call
issue\-new
instead\&.
.RE
.PP
issue\-new [<owner>/<repo>]
.RS 4
Create a new issue for a repository\&.
.RE
.PP
comment [<owner>/<repo>] <issue\-id\-number>
.RS 4
Add a comment to an issue\&.
.RE
.PP
issue\-close [<owner>/<repo>] <issue\-id\-number>
.RS 4
Close an issue\&.
.RE
.PP
pulls [<owner>/<repo>]
.RS 4
List the pull requests for a repo\&.
.RE
.PP
pull\-request [<owner>/<repo>]
.RS 4
Create a new pull request for a repository\&.
.RE
.PP
pull\-diff [<owner>/<repo>] <issue\-id\-number>
.RS 4
Show the diff for a pull request\&.
.RE
.PP
pull\-merge [<owner>/<repo>] <issue\-id\-number>
.RS 4
Merge and close a pull request\&.
.RE
.PP
keys [<user>]
.RS 4
List public SSH keys for a user\&.
.RE
.PP
keys\-add <title> <key>
.RS 4
Add a public ssh key for your user\&.
.RE
.PP
cache\-clear
.RS 4
Clear your API response cache\&.
.RE
.PP
open [<owner>/<repo>] [<file\-path>]
.RS 4
Open a browser window to a repo or a file in a repo\&.
.RE
.PP
url [<owner>/<repo>] [<file\-path>]
.RS 4
Print the URL of a repo or a file in a repo\&.
.RE
.SH "CONFIGURATION COMMANDS"
.sp
These commands are for editing your git\-hub config file and managing your GitHub authentication tokens\&.
.PP
config [<config\-key> [<config\-value>]]
.RS 4
With no args, this command will print the contents of
~/\&.githubconfig\&. With one argument (a key), print the current value of the config key\&. With two arguments (key value), set the value of the config key\&. 4 keys are currently supported:
login,
api\-token,
use\-auth, and
json\-lib\&.
.RE
.PP
config\-unset <config\-key>
.RS 4
Unset a config key\&. Removes the key from the
~/\&.githubconfig
file\&.
.RE
.PP
tokens
.RS 4
List all the API tokens for your GitHub account\&. Use the
\-\-raw
option to print the token IDs and descriptions, but not the actual token values\&.
.RE
.PP
token\-new [<description\-string>]
.RS 4
Create a new API token for your GitHub login id\&. Note: Creating a new token will not automatically add it to your
~/\&.githubconfig
file; you need to do that yourself with the
git hub config api\-token <token\-value>
command\&. Use the
\-\-raw
option to just print the new token id\&.
.RE
.sp
token\-get <api\-token\-id> <data\-key> Get a specific data value for a particular token\&.
.PP
token\-delete <api\-token\-id>
.RS 4
Delete one of your API tokens for your GitHub login id\&. Note: You need to delete tokens by
\fBid\fR
(listed by the
tokens
command), not by token value\&.
.RE
.PP
scopes <api\-token\-id>
.RS 4
List the scopes assigned to your API token, and also list all the possible scope values that you can assign\&. Use the
\-\-raw
option to just list the scopes\&.
.RE
.PP
scope\-add <api\-token\-id> <scope\-name>\&...
.RS 4
Add one or more scopes to your API token\&. You can use the
\-\-all
option to add all possible scopes at once\&.
.RE
.PP
scope\-remove <api\-token\-id> <scope\-name>\&...
.RS 4
Remove one or more scopes from your API token\&. You can use the
\-\-all
option to remove all possible scopes at once\&.
.RE
.SH "FASTER"
.sp
The git\-hub command is written in pure Bash, including a complete JSON parser written in Bash\&. Unfortunately, this parser is slow\&. It is \fBreally\fR slow for large API payloads\&.
.sp
To make the git\-hub command perform much faster, just run this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config json\-lib json\-perl\&.bash
.fi
.if n \{\
.RE
.\}
.sp
That will enable a Perl replacement, which requires Perl (of course) and the JSON\&.pm Perl module\&. If the JSON::XS Perl module is also installed, it will be even faster\&.
.SH "PIPE AND EACH"
.sp
You can pipe the output of one git hub into another and multiply your power\&. The command being piped into should use the EACH option which is a single dash (\fI\-\fR)\&. It will cause the command to be run once for each line of input, inserting the line into the command, in place of the \fI\-\fR\&. If you use a \fI=\fR it will do the same thing except for each "word" of input\&.
.sp
This command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-\-raw
.fi
.if n \{\
.RE
.\}
.sp
will list lines containing only user ids\&. You can pipe it into commands needing a user id, like:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-\-raw | git hub user \- \-\-json
.fi
.if n \{\
.RE
.\}
.sp
Thus printing the JSON user info for each follower\&. Same as:
.sp
.if n \{\
.RS 4
.\}
.nf
for _ in `git hub followers \-\-raw`; do
    git hub user $_ \-\-json
done
.fi
.if n \{\
.RE
.\}
.sp
For \fI=\fR you can do things like:
.sp
.if n \{\
.RS 4
.\}
.nf
echo alice bob chelsea | git hub trust =
.fi
.if n \{\
.RE
.\}
.sp
to trust a list of users in one go\&.
.SH "TOKEN AUTHENTICATION AND SCOPES"
.sp
Many endpoints of the GitHub v3 API require a Personal API Access Token\&. You can list your current tokens with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub tokens
.fi
.if n \{\
.RE
.\}
.sp
If you don\(cqt have any tokens or want a new one for the git\-hub command, run these commands (the git hub setup command automates this):
.sp
.if n \{\
.RS 4
.\}
.nf
git hub token\-new "my git\-hub command token"
git hub scope\-add <token\-id> user repo
git hub scopes <token\-id>
git hub config api\-token <token\-value>
.fi
.if n \{\
.RE
.\}
.sp
You can also see all your tokens on the web at \m[blue]\fBthis page\fR\m[]\&\s-2\u[1]\d\s+2\&.
.sp
You can specify your API token to git hub on the commandline with \-\-token=\&.\&.\&. or in the GIT_HUB_API_TOKEN environment variable, but the easiest thing to do is just set it in the git\-hub config\&.
.sp
Certain token \fBscopes\fR are required for various GitHub API operations\&. Make sure your token has the scopes turned on for the things you want to do\&. See the scopes, scope\-add and scope\-remove git hub subcommands\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
All the git hub commands dealing with tokens and scopes require you to enter your GitHub password\&. If you need to issue a bunch of these commands and you don\(cqt want to retype your password each time, you can put your password in the GIT_HUB_PASSWORD environment variable\&.
.sp .5v
.RE
.SH "RATE LIMITS"
.sp
GitHub limits unauthenticated API calls to 60 per hour, and authenticated API calls to 5000 per hour\&. For this reason you may wish to use authentication even for calls that don\(cqt need it\&. You can use the \-A/\-\-use\-auth option to make sure a command uses authentication\&. You can also set the config file to always use authentication, with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config use\-auth true
.fi
.if n \{\
.RE
.\}
.sp
Another option is to set the GIT_HUB_USE_AUTH environment variable:
.sp
.if n \{\
.RS 4
.\}
.nf
export GIT_HUB_USE_AUTH=true
.fi
.if n \{\
.RE
.\}
.SH "ETAG CACHING"
.sp
GitHub provides ETag headers in the API responses, and git\-hub uses them to cache responses, by default\&. When you use this feature, your rate\-limit usage is not affected for cached responses\&.
.sp
Unfortunately, there is currently a bug in GitHub\(cqs API implementation: ETag values are not always updated for changed response content\&. This means that your cache may get stale\&.
.sp
There are a few things you can do, if you suspect the cache is stale:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Use the
\-C
(\-\-no\-cache) flag on a request to bypass the cache\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Set
GIT_HUB_NO_CACHE=true
to bypass the cache\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run
git hub config no\-cache true
to never use the cache\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run
git hub cache\-clear
to erase all the cached values\&.
.RE
.SH "EXAMPLES"
.sp
The following sections show lots of interesting ways to use git hub\&. Let your imagination be your guide\&.
.SH "EXAMPLE 1. CREATE A NEW REPO AND GITHUB ORIGIN"
.sp
Do everything from the command line:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir foo
$ cd foo
$ echo \*(AqThe new foo\*(Aq > README
$ git init
$ git add README
$ git commit \-m \*(AqFirst commit\*(Aq
$ git hub new foo
$ git hub repo foo      # Get repo info including the remote address
$ git remote add origin <new\-remote\-address>
$ git push origin master
$ git hub repo\-edit \e
    description  \*(AqThe new foo\*(Aq \e
    homepage     http://example\&.com
$ git hub repo
.fi
.if n \{\
.RE
.\}
.sp
Note that on the last two commands you don\(cqt need to set the <repo> because it can be gleaned from the remote\&. Also on the edit command notice how you can specify multiple key/value pairs\&.
.SH "EXAMPLE 2. COMMANDS FROM WITHIN A REPO"
.sp
Assume your current working directory is not a GitHub repo:
.sp
.if n \{\
.RS 4
.\}
.nf
$ # List *your* repos:
$ git hub repos
$ # Clone someone else\*(Aqs repo:
$ git hub clone ingydotnet/git\-hub
$ # cd into it:
$ cd git\-hub
$ # Get info about ingydotnet:
$ git hub user
$ # Show ingydotnet\*(Aqs recent repos:
$ git hub repos
$ # Show info about ingydotnet/git\-hub:
$ git hub repo
$ # Fork the git\-hub repo:
$ git hub fork
$ # Follow ingydotnet:
$ git hub follow
$ # See who ingydotnet is following:
$ git hub following
$ # Star the ingydotnet/git\-hub repo:
$ git hub star
$ # etc\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
The git hub command tries to be environmentally aware\&. If you are in a GitHub cloned repo directory, and you don\(cqt specify <user> or <owner> or <repo> for a command that needs them, then they will be pulled from the remote url\&. Otherwise, if you don\(cqt specify a <user> it will use the one (presumably yours) that you set with the git hub config login \&.\&.\&. command\&.
.SH "EXAMPLE 3. BUILDING COMPLEX COMMANDS"
.sp
The git hub command can be used to output raw data, which can be fed into other commands; even other git hub commands\&. This lets you do some powerful automation with very little code\&. The \-\-raw (\-r) flag will make the output of many commands be usable as data, and the \- (EACH) option makes commands read data from stdin\&.
.sp
Get information about all your followers:
.sp
.if n \{\
.RS 4
.\}
.nf
for user in $(git hub followers <your\-login> \-ar); do
    git hub user $user
done
.fi
.if n \{\
.RE
.\}
.sp
Or more simply by using PIPE and EACH:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-ar | git hub user \-
.fi
.if n \{\
.RE
.\}
.sp
Follow all your followers:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-ar | git hub follow \-
.fi
.if n \{\
.RE
.\}
.sp
Find out if the people you are following, are following you!
.sp
.if n \{\
.RS 4
.\}
.nf
git hub following \-ar | git hub follows \-
.fi
.if n \{\
.RE
.\}
.sp
Clone all the repos in an organization:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub repos <org> \-ar | git hub clone \-
.fi
.if n \{\
.RE
.\}
.sp
Star the latest 5 repos from all the people you are following that have more than 50 repos:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub following <your\-login> \-ar |
    git hub user\-get \- public_repos |
    perl \-nle \*(Aqprint if $_ > 50\*(Aq |
    git hub repos \- \-rc5 |
    git hub star \-
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.sp
Written by Ingy d\(:ot Net <\m[blue]\fBingy@ingy\&.net\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "STATUS"
.sp
This command is still in early development\&. The plan is to support as much of the API as possible\&. Patches / Pull Requests welcome\&. See the file notes/todo in the git\-hub repo for upcoming changes\&.
.sp
Try make test\&. There are tests in place but testing is not yet extensive\&. Expect more testing soon\&. Also please include tests\-in\-kind for any patches you submit\&.
.sp
This command is attempting to follow the guidelines for git command development, so that it may one day be a standard command for git\&.
.sp
Find \fIingy\fR on irc\&.freenode\&.net if you have questions or ideas\&.
.SH "NOTES"
.IP " 1." 4
this page
.RS 4
\%https://github.com/settings/applications
.RE
.IP " 2." 4
ingy@ingy.net
.RS 4
\%mailto:ingy@ingy.net
.RE
