'\" t
.\"     Title: git-hub
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 08/14/2013
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-HUB" "1" "08/14/2013" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-hub \- Do GitHub operations from the `git` command
.SH "SYNOPSIS"
.sp
Here is just a few of the things you can do on GitHub with a simple command:
.sp
.nf
\fIgit hub\fR                             # Show the git hub cheat sheet
\fIgit help\fR hub                        # Show this awesome documentation
\fIgit hub\fR config login <your\-login>   # Do this first!
\fIgit hub\fR user <user>                 # Get info about a user
\fIgit hub\fR repos <owner>               # List recent repositories
\fIgit hub\fR create <repo>               # Create a new repository
\fIgit hub\fR fork <owner>/<repo>         # Fork a repository
\fIgit hub\fR repo\-edit <repo> description \fIJust another GitHub repo\fR
\fIgit hub\fR delete <owner>/<repo>       # Delete a repository
\fIgit hub\fR followers <user>            # List a user\(cqs followers
\fIgit hub\fR star ingydotnet/git\-hub     # Star this repository
\fIgit hub\fR follow ingydotnet           # Follow this author
\fIgit hub\fR trust ingydotnet            # Add collaborators to repo
                                      # Read about all your rollowers
git hub followers \-ra|git hub user \-  # Show user info for each follower
.fi
.SH "DESCRIPTION"
.sp
The \fBhub\fR subcommand for git, allows you to perform many of the operations made available by GitHub\(cqs v3 REST API, from the git commandline command\&.
.sp
You can fork, create, delete and modify repositories\&. You can get information about users, repositories and issues\&. You can \fBstar\fR, \fBwatch\fR and \fBfollow\fR things, and find out who else is doing the same\&. The API is quite extensive\&. With this command you can do many of your day to day GitHub actions without needing a web browser\&.
.sp
You can also chain commands together using the output of one as the input of another\&. See PIPING AND EACH below\&.
.SH "INSTALLATION"
.sp
Just run (possibly with sudo):
.sp
.if n \{\
.RS 4
.\}
.nf
make install
.fi
.if n \{\
.RE
.\}
.sp
This will install git\-hub next to your other git commands\&. It will also install the git\-hub manpage so you can run theses commands for help:
.sp
.if n \{\
.RS 4
.\}
.nf
man git\-hub
git help hub
.fi
.if n \{\
.RE
.\}
.SH "CONFIGURATION"
.sp
Before using the git hub command, you will need to set a couple configuration options\&. Run these commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config login <your\-github\-login\-id>
git hub config api\-token <your\-github\-api\-token>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If you don\(cqt know what your API token is, see the next section\&.
.sp .5v
.RE
.sp
These values will be stored in ~/\&.githubconfig, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[github]
        login = <your\-github\-id>
        api\-token = <your\-github\-api\-token>
.fi
.if n \{\
.RE
.\}
.sp
You can edit this file by hand or use the git hub config command\&.
.SH "AUTHENTICATION"
.sp
Many endpoints of the GitHub v3 API require a Personal API Access Token\&. You can list your current tokens with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub token\-list
.fi
.if n \{\
.RE
.\}
.sp
If you don\(cqt have any tokens or want a new one for the git\-hub command, run these commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub token\-create "my git\-hub command token"
git hub scope\-add <token\-id> user repo
git hub scope\-list <token\-id>
git hub config api\-token <token\-value>
.fi
.if n \{\
.RE
.\}
.sp
You can also see all your tokens on the web at \m[blue]\fBthis page\fR\m[]\&\s-2\u[1]\d\s+2\&.
.sp
You can specify your API token to git hub on the commandline with \-\-token=\&.\&.\&. or in the GIT_HUB_API_TOKEN environment variable, but the easiest thing to do is just set it in the git\-hub config\&.
.sp
Certain token \fBscopes\fR are required for various GitHub API operations\&. Make sure your token has the scopes turned on for the things you want to do\&. See the scope\-list, scope\-add and scope\-remove git hub subcommands\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
All the git hub commands dealing with tokens and scopes require you to enter your GitHub password\&. If you need to issue a bunch of these commands and you don\(cqt want to retype your password each time, you can put your password in the GIT_HUB_PASSWORD environment variable\&.
.sp .5v
.RE
.SH "RATE LIMITS"
.sp
GitHUb limits unauthenticated API calls to 60 per hour, and authenticated API calls to 5000 per hour\&. For this reason you may wish to use authentication even for calls that don\(cqt need it\&. You can use the \-A/\-\-use\-auth option to make sure a command uses authentication\&. You can also set the config file to always use authentication, with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config use\-auth 1
.fi
.if n \{\
.RE
.\}
.sp
Another option is to set the GIT_HUB_USE_AUTH environment variable:
.sp
.if n \{\
.RS 4
.\}
.nf
export GIT_HUB_USE_AUTH=1
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.sp
Commandline options start with a dash and can appear in any order in the command\&.
.PP
\-c <number>, \-\-count=<number>
.RS 4
This option is for commands that return a list of things\&. Specify the number of items you want the command to return\&. Each list command has a reasonable default value\&.
.RE
.PP
\-a, \-\-all
.RS 4
Show all elements for list commands\&. Also applies to a few other commands as documented\&.
.RE
.PP
\-r, \-\-raw
.RS 4
For commands the produce lists, just list the raw data\&. For commands that produce reports, show the raw storage keys, rather than the human friendly ones\&. You will need the raw keys to edit/change values\&.
.RE
.PP
\-j, \-\-json
.RS 4
For some commands, you can get the raw data in JSON\&.
.RE
.PP
\-
.RS 4
This option, just a single
\fI\-\fR, is small but very powerful\&. It means to read the next line from stdin, and put the content into the command at that point\&. See PIPING and EACH below\&.
.RE
.PP
\-h
.RS 4
Show the brief command usage\&.
.RE
.PP
\-\-help
.RS 4
Show the full documentation\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Show minimal output\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Show detailed output\&. Notably, show the raw command that is used for the GitHub API calls\&.
.RE
.PP
\-\-token=<api\-token>
.RS 4
Set or override the api\-token required by the command\&. This value can also come from the
GIT_HUB_API_TOKEN
environment variable\&. Usually this value comes from your
~/\&.githubconfig
file\&.
.RE
.PP
\-d, \-\-dryrun
.RS 4
Don\(cqt actually make the API call\&. This option turns on verbose mode\&.
.RE
.PP
\-T
.RS 4
Show the API token in the verbose output\&. Hidden by default\&. This option turns on verbose mode\&.
.RE
.PP
\-A, \-\-use\-auth
.RS 4
Use authentication whether or not it is needed for a certain command\&. This is useful if you have exceeded your hourly GitHub API rate limit, which is 60 calls unauthenticated, and 5000 calls authenticated\&.
.RE
.SH "DEBUG OPTIONS"
.sp
There are a number of debug options that will give you lots of extra information (albeit in a less pretty format)\&.
.PP
\-O
.RS 4
Show the API reponse output\&. Always in JSON format\&. JSON is pretty\-printed\&.
.RE
.PP
\-H
.RS 4
Show the API response headers\&.
.RE
.PP
\-J
.RS 4
Show the API response JSON, in decoded form\&.
.RE
.PP
\-R
.RS 4
Repeat the last command, using the previous API server response\&. Useful for development and debugging\&. (Beware, only caches the most recent API call, so not really good for commands that make multiple calls)\&.
.RE
.PP
\-x
.RS 4
Turn on Bash
\-x
debugging\&. This will show every bash command executed in the program\&.
.RE
.SH "ARGUMENTS"
.sp
The git hub command gets its input values from these sources (in this order):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commandline
\fBarguments\fR
(see specific command, below)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Environment variables of the form
GIT_HUB_VARIABLE_NAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\&./\&.git/config
file\&. (The repo you are issuing commands from)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
~/\&.githubconfig
file\&.
.RE
.sp
Most of the commands described below have arguments\&. This section defines each of the argument types\&. Note that argument values that are strings containing whitespace need to be quoted\&.
.sp
Argument variable names are always indicated by angle brackets, like: <variable>\&. Arguments listed in square brackets are optional and arguments followed by \&.\&.\&. indicate that more than one is allowed\&.
.PP
<user>
.RS 4
A GitHub user name\&. Sometimes an organization name can be used instead\&. If this argument is optional, it defaults to the GitHub owner of the repo you are currently in\&. If you are not in a GitHub repo, it defaults to your login\&.
\fBOverride\fR:
GIT_HUB_USER_NAME
environment variable\&.
.RE
.PP
<owner>
.RS 4
A GitHub user or organization that owns the repository being specified\&. This value defaults much like the
<user>
argument (above)\&.
\fBOverride\fR:
GIT_HUB_OWNER_NAME
environment variable\&.
.RE
.PP
<org>
.RS 4
A GitHub organization name\&.
\fBOverride\fR:
GIT_HUB_ORG_NAME
environment variable\&.
.RE
.PP
<repo>
.RS 4
A GitHub repository name\&. If this argument is optional, it defaults to the GitHub repo name of the repo you are currently in\&.
\fBOverride\fR:
GIT_HUB_REPO_NAME
environment variable\&.
.RE
.PP
<owner>/<repo>
.RS 4
Many commands need both an owner and repo separated by a slash\&. If the owner is you (your GitHub login) you can omit it (but you still need the leading slash)\&. Like
/myrepo, instead of
me/myrepo\&. If this argument is optional, it defaults the the owner and repo of the GitHub repo you are in\&.
.RE
.PP
<key\-value\-pair>
.RS 4
Two strings separated by whitespace\&. Values with embedded whitespace should be quoted\&. The documentation of each command that needs these pairs, will list the valid keys\&.
.RE
.PP
<api\-token\-id>
.RS 4
The integer number
\fBid\fR
of a token (not the 40 hex\-character value)\&.
.RE
.PP
<scope\-name>
.RS 4
One of the GitHub scopes that you can apply to a token\&. The
git hub scope\-list
command will tell you all of these, and what they mean\&.
.RE
.SH "COMMANDS"
.PP
user [<user>]
.RS 4
Show basic information about a specific user\&. User defaults to the owner of the current repo, or your login if you are not inside a repo directory\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
user\-edit <user> <key\-value\-pair>\&...
.RS 4
Set specific meta\-data fields of a user to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following user keys: `name`, `email`, `blog`,
`location`, `company`, `bio`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
orgs [<user>]
.RS 4
List the organizations that a user is a member of\&.
.RE
.PP
org <org>
.RS 4
Show basic information about a GitHub organization\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
org\-edit <org> <key\-value\-pairs>\&...
.RS 4
Set specific meta\-data fields of an organization to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following organization keys: `name`, `email`,
`billing_email`, `blog`, `location`, `company`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
members <org>
.RS 4
List the members of an organization\&.
.RE
.PP
teams <org>
.RS 4
List the teams in an organization\&.
.RE
.PP
followers [<user>]
.RS 4
List the people who are followers of a user\&.
.RE
.PP
following [<user>]
.RS 4
List the people that a user is following\&.
.RE
.PP
follow <user>\&...
.RS 4
Follow one or more users\&.
.RE
.PP
unfollow <user>\&...
.RS 4
Stop following one or more users\&.
.RE
.PP
clone <owner>/<repo> [<directory>]
.RS 4
Clone a GitHub repo\&.
.RE
.PP
repos [<user>]
.RS 4
List the repos for a user or organization\&. List is returned in order of recent activity\&.
.RE
.PP
repo [<repo>]
.RS 4
Show basic information about a specific repository\&. The
\-\-raw
and
\-\-json
options show the data in different formats than normal output\&.
.RE
.PP
repo\-edit [<owner>/<repo>] <key\-value\-pair>\&...
.RS 4
Set specific meta\-data fields of a repository to new values\&. You list the parameters as key/value pairs\&.
.sp
.if n \{\
.RS 4
.\}
.nf
You can edit the following repo keys: `description`, `homepage`\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
repo\-create [<org>/]<repo>
.RS 4
Create a new GitHub repository\&.
\fBAlias\fR:
create\&.
.RE
.PP
repo\-delete <owner>/<repo>
.RS 4
Delete a GitHub repository\&.
.RE
.PP
forks [<owner>/<repo>]
.RS 4
List the forks of a repository\&.
.RE
.PP
fork <owner>/<repo> [<org>]
.RS 4
Fork a repository to your account or to an organization\&.
.RE
.PP
stars [<owner>/<repo>]
.RS 4
Show what users have starred a repository\&.
.RE
.PP
star [<owner>/<repo>]
.RS 4
Add your
\fBstar\fR
to a repository\&.
.RE
.PP
unstar [<owner>/<repo>]
.RS 4
Add your
\fBstar\fR
to a repository\&.
.RE
.PP
starred [<user>]
.RS 4
List repositories that a user has starred\&.
.RE
.PP
collabs [<owner>/<repo>]
.RS 4
List current collaborators for a repository\&.
.RE
.PP
trust [<owner>/<repo>] <user>\&...
.RS 4
Add one or more collaborators to a repository\&.
.RE
.PP
untrust [<owner>/<repo>] <user>\&...
.RS 4
Remove one or more collaborators from a repository\&.
.RE
.PP
issues [<owner>/<repo>]
.RS 4
List the issues for a repo\&.
.RE
.PP
issue [<owner>/<repo>] <issue\-id\-number>
.RS 4
Show info (including any comments) for a specific issue\&.
.RE
.PP
config [<config\-key> [<config\-value>]]
.RS 4
With no args, this command will print the contents of
~/\&.githubconfig\&. With one argument (a key), print the current value of the config key\&. With two arguments (key value), set the value of the config key\&. Only 3 keys are currently supported:
login,
api\-token
and
use\-auth\&.
.RE
.sp
config\-unset <config\-key> Unset a config key\&. Removes the key from the ~/\&.githubconfig file\&.
.PP
token\-list
.RS 4
List all the API tokens for your GitHub account\&. Use the
\-\-raw
option to print the token IDs and descriptions, but not the actual token values\&.
.RE
.PP
token\-create [<description\-string>]
.RS 4
Create a new API token for your GitHub login id\&. Note: Creating a new token will not automatically add it to your
~/\&.githubconfig
file; you need to do that yourself with the
git hub config api\-token <token\-value>
command\&. Use the
\-\-raw
option to just print the new token id\&.
.RE
.PP
token\-delete <api\-token\-id>
.RS 4
Delete one of your API tokens for your GitHub login id\&. Note: You need to delete tokens by
\fBid\fR
(listed by the
token\-list
command), not by token value\&.
.RE
.PP
scope\-list <api\-token\-id>
.RS 4
List the scopes assigned to your API token, and also list all the possible scope values that you can assign\&. Use the
\-\-raw
option to just list the scopes\&.
.RE
.PP
scope\-add <api\-token\-id> <scope\-name>\&...
.RS 4
Add one or more scopes to your API token\&. You can use the
\-\-all
option to add all possible scopes at once\&.
.RE
.PP
scope\-remove <api\-token\-id> <scope\-name>\&...
.RS 4
Remove one or more scopes from your API token\&. You can use the
\-\-all
option to remove all possible scopes at once\&.
.RE
.SH "PIPING AND EACH"
.sp
You can pipe the output of one git hub into another and multiply your power\&. The command being piped into should use the EACH option which is a single dash (\fI\-\fR)\&. It will cause the command to be run once for each line of input, inserting the line into the command, in place of the \fI\-\fR\&.
.sp
This command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-\-raw
.fi
.if n \{\
.RE
.\}
.sp
will list lines containing only user ids\&. You can pipe it into commands needing a user id, like:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub followers \-\-raw | git hub user \- \-\-json
.fi
.if n \{\
.RE
.\}
.sp
Thus printing the JSON user info for each follower\&. Same as:
.sp
.if n \{\
.RS 4
.\}
.nf
for _ in `git hub followers \-\-raw`; do
    git hub user $_ \-\-json
done
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLES"
.sp
The following sections show lots of interesting ways to use git hub\&. Let your imagination be your guide\&.
.SH "EXAMPLE 1. CREATE A NEW REPO AND GITHUB ORIGIN"
.sp
Do everything from the command line:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir foo
$ cd foo
$ echo \*(AqThe new foo\*(Aq > README
$ git init
$ git add README
$ git commit \-m \*(AqFirst commit\*(Aq
$ git hub create foo
$ git hub repo foo      # Get repo info including the remote address
$ git remote add origin <new\-remote\-address>
$ git push origin master
$ git hub repo\-edit \e
    description \*(AqThe new foo\*(Aq \e
    homepage http://example\&.com
$ git hub repo
.fi
.if n \{\
.RE
.\}
.sp
Note that on the last two commands you don\(cqt need to set the <repo> because it can be gleaned from the remote\&. Also on the edit command notice how you can specify multiple key/value pairs\&.
.SH "EXAMPLE 2. COMMANDS FROM WITHIN A REPO"
.sp
Assume your current working directory is not a GitHub repo:
.sp
.if n \{\
.RS 4
.\}
.nf
$ # List *your* repos:
$ git hub repos
$ # Clone someone else\*(Aqs repo:
$ git hub clone ingydotnet/git\-hub
$ # cd into it:
$ cd git\-hub
$ # Get info about ingydotnet:
$ git hub user
$ # Show ingydotnet\*(Aqs recent repos:
$ git hub repos
$ # Show info about ingydotnet/git\-hub:
$ git hub repo
$ # Fork the git\-hub repo:
$ git hub fork
$ # Follow ingydotnet:
$ git hub follow
$ # See who ingydotnet is following:
$ git hub following
$ # Star the ingydotnet/git\-hub repo:
$ git hub star
$ # etc\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
The git hub command tries to be environmentally aware\&. If you are in a GitHub cloned repo directory, and you don\(cqt specify <user> or <owner> or <repo> for a command that needs them, then they will be pulled from the remote url\&. Otherwise, if you don\(cqt specify a <user> it will use the one (presumably yours) that you set with the git hub config login \&.\&.\&. command\&.
.SH "EXAMPLE 3. BUILDING COMPLEX COMMANDS"
.sp
The git hub command can be used to output raw data, which can be fed into other commands; even other git hub commands\&. This lets you do some powerful automation with very little code\&. The \-\-raw (\-r) and \-\-quiet (\-q) flags will make the output of many commands be usable as data, and the \- (EACH) option makes commands read data from stdin\&.
.PP
Get information about all your followers
.RS 4
for user in $(git hub followers <your\-login> \-ar); do git hub user $user echo # Separate them with a blank line done
.RE
.sp
Or more simply by using PIPING and EACH:
.sp
.if n \{\
.RS 4
.\}
.nf
fgit hub followers <your\-login> \-ar | git hub user \-
.fi
.if n \{\
.RE
.\}
.PP
Follow all your followers
.RS 4
git hub followers <your\-login> \-ar | git hub follow \-
.RE
.PP
Clone all the repos in an organization
.RS 4
git hub repos <org> \-ar | git hub clone \-
.RE
.sp
Star the latest 5 repos from all the people you are following that have more than 50 repos::
.sp
.if n \{\
.RS 4
.\}
.nf
git hub following <your\-login> \-ar |
    git hub user\-get \- public_repos |
    perl \-nle \*(Aqprint if $_ > 50\*(Aq |
    git hub repos \- \-qc5 |
    git hub star \-
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.sp
Written by Ingy d\(:ot Net <\m[blue]\fBingy@ingy\&.net\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "STATUS"
.sp
This command is still in early development\&. Only the basic commands have been supported, but the plan is to support as much of the API as possible\&. Patches / Pull Requests welcome\&. See the file notes/todo in the git\-hub repo for upcoming changes\&.
.sp
There are rudimentary tests in place but testing is not yet extensive\&. Expect more testing soon\&. Also please include tests\-in\-kind for any patches you submit\&.
.sp
This command is attempting to follow the guidelines for git command development, so that it may one day be a standard command for git\&.
.sp
Find \fIingy\fR on irc\&.freenode\&.net if you have questions or ideas\&.
.SH "NOTES"
.IP " 1." 4
this page
.RS 4
\%https://github.com/settings/applications
.RE
.IP " 2." 4
ingy@ingy.net
.RS 4
\%mailto:ingy@ingy.net
.RE
